{
  "components": {
    "parameters": {
      "X-Postscript-Shop-Token": {
        "description": "**Only required for partners**, when the Bearer token is a Partner API Key, the Shop's Private API Key must be in this header", 
        "example": "sk_1234567890abcdefg", 
        "in": "header", 
        "name": "X-Postscript-Shop-Token", 
        "required": false, 
        "schema": {
          "type": "string"
        }
      }
    }, 
    "schemas": {
      "ApiSubscriberOrigin": {
        "description": "Allowed values for api-provided subscriber origin.", 
        "enum": [
          "website", 
          "social", 
          "other"
        ], 
        "title": "ApiSubscriberOrigin", 
        "type": "string"
      }, 
      "CreateMessageRequestSerializer": {
        "description": "Message Request Serializer", 
        "properties": {
          "body": {
            "description": "Message text. Before delivery, the shop name will be prepended, and links will be shortened.", 
            "example": "Hello World!", 
            "minLength": 1, 
            "title": "example: \"Hello, World!\"", 
            "type": "string"
          }, 
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageCategory"
              }
            ], 
            "default": "conversational", 
            "description": "Intended subscription category of the Message Request.", 
            "example": "promotional", 
            "title": "example: \"promotional\""
          }, 
          "country": {
            "default": "US", 
            "description": "ISO Alpha-2 country code, used to parse `phone` more accurately.", 
            "example": "US", 
            "maxLength": 2, 
            "minLength": 2, 
            "title": "example: \"NZ\" for New Zealand", 
            "type": "string"
          }, 
          "phone": {
            "description": "Phone number of the recipient (Subscriber).", 
            "example": "15552223333", 
            "title": "example: \"+15552223333\"", 
            "type": "string"
          }, 
          "scheduled_at": {
            "description": "ISO 8601 datetime to schedule delivery in the future. Default: `null` (deliver ASAP)", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "subscriber_id": {
            "description": "ID of the recipient (Subscriber).", 
            "example": "s_abc123xyz0q95", 
            "title": "example: \"s_abc123xyz0q95\"", 
            "type": "string"
          }
        }, 
        "required": [
          "body"
        ], 
        "title": "CreateMessageRequestSerializer", 
        "type": "object"
      }, 
      "CreateMessageRequest_EntityConflict": {
        "properties": {
          "http_status": {
            "default": 409, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Subscriber is opted out", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.subscriber_opted_out", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateMessageRequest_EntityConflict", 
        "type": "object"
      }, 
      "CreateMessageRequest_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid `phone` provided: ", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateMessageRequest_EntityNotFound", 
        "type": "object"
      }, 
      "CreateMessageRequest_InternalServerError": {
        "properties": {
          "http_status": {
            "default": 500, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Encountered an unknown issue when attempting to create message", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.internal_server_error", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateMessageRequest_InternalServerError", 
        "type": "object"
      }, 
      "CreateMessageRequest_RequestError": {
        "properties": {
          "http_status": {
            "default": 400, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Unable to send message: not enough credits.", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.request_error", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateMessageRequest_RequestError", 
        "type": "object"
      }, 
      "CreateSingleSubscriber": {
        "description": "Create a single Subscriber", 
        "properties": {
          "email": {
            "description": "An email address, only used to look up a Shopify Customer record if `shopify_customer_id` isn't provided. This is not stored on the subscriber", 
            "example": "email@email.com", 
            "title": "Email", 
            "type": "string"
          }, 
          "keyword": {
            "description": "The Keyword to which the subscriber should be subscribed to. This field or *keyword_id* is required.", 
            "example": "YOUROCK", 
            "title": "Keyword", 
            "type": "string"
          }, 
          "keyword_id": {
            "description": "The ID of the Keyword to which the subscriber should be subscribed to. This field or *keyword* is required.", 
            "example": "kw_31afjew824892ks", 
            "title": "Keyword Id", 
            "type": "string"
          }, 
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSubscriberOrigin"
              }
            ], 
            "description": "Subscriber Origin allowed values", 
            "example": "other"
          }, 
          "phone_number": {
            "description": "Phone number of the subscriber", 
            "example": "15552223333", 
            "title": "Phone Number", 
            "type": "string"
          }, 
          "properties": {
            "description": "Custom properties as key/value pairs. Values can be: strings, integers, string arrays, or ISO 8601 date(time). Subscribers can have up to 20 custom properties. If properties is unset or null, it will be ignored.", 
            "example": {
              "birthday": "1991-01-01", 
              "categories": [
                "Beauty", 
                "Home Goods"
              ], 
              "days_since_purchase": 5, 
              "has_purchased": true
            }, 
            "format": "json-string", 
            "title": "Properties", 
            "type": "string"
          }, 
          "shopify_customer_id": {
            "description": "A reference to the Shopify Customer record for the subscriber", 
            "example": "8888777333111", 
            "title": "Shopify Customer Id", 
            "type": "integer"
          }, 
          "single_opt_in": {
            "default": false, 
            "title": "Single Opt In", 
            "type": "boolean"
          }, 
          "tags": {
            "description": "Subscriber Tags", 
            "example": [
              "VIP"
            ], 
            "items": {
              "type": "string"
            }, 
            "title": "Tags", 
            "type": "array"
          }
        }, 
        "required": [
          "phone_number", 
          "origin"
        ], 
        "title": "CreateSingleSubscriber", 
        "type": "object"
      }, 
      "CreateSubscriber_EntityConflict": {
        "properties": {
          "http_status": {
            "default": 409, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Pending subscriber already exists with phone_number: 15552223333", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_conflict", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateSubscriber_EntityConflict", 
        "type": "object"
      }, 
      "CreateWebhookSubscriptionPayload": {
        "description": "POST payload.", 
        "properties": {
          "callback_url": {
            "description": "Destination URL for webhook deliveries (HTTPS only).", 
            "example": "https://www.example.com/webhook", 
            "format": "uri", 
            "maxLength": 65536, 
            "minLength": 1, 
            "title": "example: \"https://www.example.com/webhook\"", 
            "type": "string"
          }, 
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ], 
            "description": "Webhook subscription `event` type.", 
            "example": "shop.incoming_message", 
            "title": "example: \"shop.incoming_message\""
          }, 
          "headers": {
            "additionalProperties": {
              "type": "string"
            }, 
            "default": {}, 
            "description": "Custom key:value pairs to be sent as headers in every callback.", 
            "example": {
              "custom": "abc123"
            }, 
            "title": "example: {\"custom\": \"abc123\"}", 
            "type": "object"
          }
        }, 
        "required": [
          "callback_url", 
          "event"
        ], 
        "title": "CreateWebhookSubscriptionPayload", 
        "type": "object"
      }, 
      "CreateWebhookSubscription_EntityConflict": {
        "properties": {
          "http_status": {
            "default": 409, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Conflicting Webhook Subscription found (id: a47606a1-5b39-4a81-9480-c2cb738ff675)", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_conflict", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "CreateWebhookSubscription_EntityConflict", 
        "type": "object"
      }, 
      "CustomSubscriberEventsRequestSerializer": {
        "additionalProperties": false, 
        "description": "The JSON schema relating to a custom subscriber event:\nhttps://www.notion.so/postscriptio/Custom-Subscriber-Events-b179fe150a2147d898366a1304d8d98f.", 
        "properties": {
          "occurred_at": {
            "description": "The time when the event occurredAt defaults to the time it was received if not provided.", 
            "example": "2021-03-30 14:38:29.0000", 
            "format": "date-time", 
            "title": "occurred_at", 
            "type": "string"
          }, 
          "properties": {
            "description": "The set of custom subscriber event attributes and values.", 
            "example": {
              "test_event": true
            }, 
            "title": "properties", 
            "type": "object"
          }, 
          "subscriber_id": {
            "description": "Deserialized ID of the recipient (Subscriber).", 
            "example": 123, 
            "title": "subscriber_id", 
            "type": "integer"
          }, 
          "type": {
            "description": "A case-sensitive field which creates a distinct \u201cnamespace\u201d of this Event. This can be a combination of alphanumeric characters, _ underscores, and : colons.", 
            "example": "Product Ordered", 
            "maxLength": 255, 
            "minLength": 1, 
            "pattern": "[a-zA-Z0-9_:]*$", 
            "title": "type", 
            "type": "string"
          }
        }, 
        "required": [
          "type", 
          "subscriber_id"
        ], 
        "title": "CustomSubscriberEventsRequestSerializer", 
        "type": "object"
      }, 
      "CustomSubscriberEventsResponse": {
        "additionalProperties": false, 
        "description": "The Custom Subscriber Event Response:\nhttps://www.notion.so/postscriptio/Custom-Subscriber-Events-b179fe150a2147d898366a1304d8d98f#eb6f7b0ad65f4f62bbe29963d313f168", 
        "properties": {
          "event_ids": {
            "default": [], 
            "description": "The Event Id which contains the UUID V1 of the event that is processing.", 
            "example": "ecdc2d4e-9c5b-4d10-9b7a-e2fbb04422e4", 
            "items": {
              "type": "string"
            }, 
            "title": "event_ids", 
            "type": "array"
          }
        }, 
        "title": "CustomSubscriberEventsResponse", 
        "type": "object"
      }, 
      "DeleteWebhookSubscription_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid webhook id provided: a47606a1-5b39-4a81-9480-c2cb738ff675", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "DeleteWebhookSubscription_EntityNotFound", 
        "type": "object"
      }, 
      "EmptyResponse": {
        "properties": {}, 
        "title": "EmptyResponse", 
        "type": "object"
      }, 
      "EventType": {
        "description": "An enumeration.", 
        "enum": [
          "shop.test", 
          "shop.incoming_message"
        ], 
        "title": "EventType", 
        "type": "string"
      }, 
      "FetchMessageRequest_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Unable to find Message Request matching ID: amr_abc123xyz0q95", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchMessageRequest_EntityNotFound", 
        "type": "object"
      }, 
      "FetchMessageRequest_RequestError": {
        "properties": {
          "http_status": {
            "default": 400, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid format for Message Request ID provided: amr_abc123xyz0q95", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.request_error", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchMessageRequest_RequestError", 
        "type": "object"
      }, 
      "FetchPendingSubscriber_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid subscriber id provided: 0000000000011111", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchPendingSubscriber_EntityNotFound", 
        "type": "object"
      }, 
      "FetchSentMessage_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Unable to find Sent Message matching ID: sm_8a88bc776688555d", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchSentMessage_EntityNotFound", 
        "type": "object"
      }, 
      "FetchSentMessage_RequestError": {
        "properties": {
          "http_status": {
            "default": 400, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid format for Sent Message ID provided: sm_8a88bc776688555d", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.request_error", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchSentMessage_RequestError", 
        "type": "object"
      }, 
      "FetchSingleKeyword_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid keyword id provided: UNREAL", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchSingleKeyword_EntityNotFound", 
        "type": "object"
      }, 
      "FetchSubscriber_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid subscriber id provided: 0000000000011111", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchSubscriber_EntityNotFound", 
        "type": "object"
      }, 
      "FetchWebhookSubscription_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid webhook id provided: a47606a1-5b39-4a81-9480-c2cb738ff675", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "FetchWebhookSubscription_EntityNotFound", 
        "type": "object"
      }, 
      "GetCustomSubscriberEventResponse": {
        "additionalProperties": false, 
        "description": "The JSON schema relating to a custom subscriber event:\nhttps://www.notion.so/postscriptio/Custom-Subscriber-Events-b179fe150a2147d898366a1304d8d98f#e14189cf3aaf458c8b6f78b033ac9e34", 
        "properties": {
          "occurred_at": {
            "description": "The time when the event occurredAt defaults to the time it was received if not provided.", 
            "example": "2021-03-30 14:38:29.0000", 
            "format": "date-time", 
            "title": "occurred_at", 
            "type": "string"
          }, 
          "properties": {
            "description": "The set of custom subscriber event attributes and values.", 
            "example": {
              "test_event": true
            }, 
            "title": "properties", 
            "type": "object"
          }, 
          "subscriber_id": {
            "description": "External ID of the Subscriber.", 
            "example": "s_abc123xyz0q95", 
            "title": "Subscriber Id", 
            "type": "string"
          }, 
          "type": {
            "description": "A case-sensitive field which creates a distinct \u201cnamespace\u201d of this Event. This can be a combination of alphanumeric characters, _ underscores, and : colons.", 
            "example": "Product Ordered", 
            "maxLength": 255, 
            "minLength": 1, 
            "pattern": "[a-zA-Z0-9_:]*$", 
            "title": "type", 
            "type": "string"
          }
        }, 
        "required": [
          "type", 
          "subscriber_id"
        ], 
        "title": "GetCustomSubscriberEventResponse", 
        "type": "object"
      }, 
      "GetCustomSubscriberEvent_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Entity not found.", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "GetCustomSubscriberEvent_EntityNotFound", 
        "type": "object"
      }, 
      "GetCustomSubscriberEvent_UnauthorizedAccessError": {
        "properties": {
          "http_status": {
            "default": 403, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Access denied. You do not have permissions to access the requested resource.", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.access_denied", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "GetCustomSubscriberEvent_UnauthorizedAccessError", 
        "type": "object"
      }, 
      "HealthCheckResponse": {
        "description": "Health check response.", 
        "properties": {
          "cache": {
            "title": "Cache", 
            "type": "boolean"
          }, 
          "db": {
            "title": "Db", 
            "type": "boolean"
          }, 
          "env": {
            "title": "Env", 
            "type": "string"
          }, 
          "version": {
            "title": "Version", 
            "type": "string"
          }
        }, 
        "required": [
          "env", 
          "version", 
          "db", 
          "cache"
        ], 
        "title": "HealthCheckResponse", 
        "type": "object"
      }, 
      "KeywordSerializer": {
        "description": "A Postscript Keyword.", 
        "properties": {
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which the Keyword was created", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "id": {
            "description": "ID of the Keyword", 
            "example": "kw_31afjew824892ks", 
            "title": "example: \"kw_31afjew824892ks\"", 
            "type": "string"
          }, 
          "keyword": {
            "description": "Keyword Text", 
            "example": "YOUROCK", 
            "title": "Keyword", 
            "type": "string"
          }, 
          "triggered_count": {
            "description": "Number of times the Keyword has been triggered by subscribers", 
            "example": 10, 
            "title": "Triggered Count", 
            "type": "integer"
          }, 
          "updated_at": {
            "description": "ISO 8601 datetime (UTC) at which the Keyword was last updated", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }
        }, 
        "required": [
          "id", 
          "keyword", 
          "triggered_count"
        ], 
        "title": "KeywordSerializer", 
        "type": "object"
      }, 
      "KeywordsList": {
        "description": "A list of Keywords.", 
        "properties": {
          "keywords": {
            "description": "nested Keywords list array", 
            "example": [
              {
                "created_at": "2023-01-01T09:30:00-0800", 
                "id": "kw_31afjew824892ks", 
                "keyword": "YOUROCK", 
                "triggered_count": 10, 
                "updated_at": "2023-01-01T09:30:00-0800"
              }
            ], 
            "items": {
              "$ref": "#/components/schemas/KeywordSerializer"
            }, 
            "title": "Keywords", 
            "type": "array"
          }
        }, 
        "required": [
          "keywords"
        ], 
        "title": "KeywordsList", 
        "type": "object"
      }, 
      "MeResponse": {
        "description": "Information about the current authorization.", 
        "properties": {
          "resource_id": {
            "anyOf": [
              {
                "type": "string"
              }, 
              {
                "type": "string"
              }
            ], 
            "title": "Resource Id"
          }, 
          "resource_name": {
            "title": "Resource Name", 
            "type": "string"
          }, 
          "resource_type": {
            "$ref": "#/components/schemas/ResourceType"
          }
        }, 
        "required": [
          "resource_type", 
          "resource_id", 
          "resource_name"
        ], 
        "title": "MeResponse", 
        "type": "object"
      }, 
      "MessageCategory": {
        "description": "An enumeration.", 
        "enum": [
          "conversational", 
          "transactional", 
          "promotional"
        ], 
        "title": "MessageCategory", 
        "type": "string"
      }, 
      "MessageRequestSerializer": {
        "description": "Message Request Serializer", 
        "properties": {
          "body": {
            "description": "Message text. Before delivery, the shop name will be prepended, and links will be shortened.", 
            "example": "Hello World!", 
            "title": "example: \"Hello, World!\"", 
            "type": "string"
          }, 
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageCategory"
              }
            ], 
            "description": "Intended subscription category of the Message Request.", 
            "example": "promotional", 
            "title": "example: \"promotional\""
          }, 
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which the Message Request was created.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "id": {
            "description": "ID of the Message Request.", 
            "example": "amr_abc123xyz0q95", 
            "title": "example: \"amr_abc123xyz0q95\"", 
            "type": "string"
          }, 
          "phone": {
            "description": "phone number of the recipient (Subscriber).", 
            "example": "+1 (555) 222-333315552223333", 
            "title": "example: \"+1 (555) 222-3333\"", 
            "type": "string"
          }, 
          "scheduled_at": {
            "description": "ISO 8601 datetime (UTC) at which Message Request is scheduled to deliver. `null` if ASAP.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "sent_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SentMessageSerializer"
              }
            ], 
            "description": "nested Sent Message object. `null` until delivery is attempted.", 
            "example": {
              "body": "Hello World!", 
              "cost": "null", 
              "created_at": "2023-01-01T09:30:00-0800", 
              "credits_used": 1, 
              "id": "amr_abc123xyz0q95", 
              "phone": "15552223333", 
              "shop_id": "shop_88aaa899999b88c8", 
              "subscriber_id": "s_abc123xyz0q95"
            }, 
            "title": "Sent Message"
          }, 
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageStatus"
              }
            ], 
            "default": "processing", 
            "description": "Human-readable status summary for the Message Request.", 
            "example": "delivered", 
            "title": "example: \"delivered\""
          }, 
          "status_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageStatusCodes"
              }
            ], 
            "default": 1001, 
            "description": "Postscript status code for the Message Request.", 
            "example": "3001", 
            "title": "example: 3001"
          }, 
          "subscriber_id": {
            "description": "ID of the recipient (Subscriber).", 
            "example": "s_abc123xyz0q95", 
            "title": "example: \"s_abc123xyz0q95\"", 
            "type": "string"
          }, 
          "updated_at": {
            "description": "ISO 8601 datetime (UTC) at which the Message Request was last updated.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }
        }, 
        "title": "MessageRequestSerializer", 
        "type": "object"
      }, 
      "MessageStatus": {
        "description": "An enumeration.", 
        "enum": [
          "processing", 
          "scheduled", 
          "rescheduled: waking hours", 
          "delayed: waking hours", 
          "delivered", 
          "failed", 
          "failed: subscriber opt-out", 
          "failed: insufficient credits", 
          "failed: carrier issue"
        ], 
        "title": "MessageStatus", 
        "type": "string"
      }, 
      "MessageStatusCodes": {
        "description": "An enumeration.", 
        "enum": [
          1001, 
          2001, 
          2081, 
          2008, 
          3001, 
          4001, 
          4002, 
          4003, 
          4004, 
          4051, 
          4901, 
          4902, 
          4951, 
          4907
        ], 
        "title": "MessageStatusCodes", 
        "type": "integer"
      }, 
      "OkResponse": {
        "properties": {
          "message": {
            "default": "OK", 
            "enum": [
              "OK"
            ], 
            "title": "Message", 
            "type": "string"
          }
        }, 
        "title": "OkResponse", 
        "type": "object"
      }, 
      "PageInfo": {
        "description": "Create page info for a specific query.\n\nNot included by default because of the performance implications on large sets.", 
        "properties": {
          "page": {
            "title": "Page", 
            "type": "integer"
          }, 
          "total_pages": {
            "title": "Total Pages", 
            "type": "integer"
          }
        }, 
        "required": [
          "page", 
          "total_pages"
        ], 
        "title": "PageInfo", 
        "type": "object"
      }, 
      "PatchSubscriber_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid subscriber id provided: 0000000000011111", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "PatchSubscriber_EntityNotFound", 
        "type": "object"
      }, 
      "PendingSubscriberList": {
        "description": "A list of Pending Subscribers.", 
        "properties": {
          "page_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageInfo"
              }
            ], 
            "description": "Page number of results found", 
            "example": "{'page': 1, 'total_pages': 1}", 
            "title": "Page Info"
          }, 
          "pending_subscribers": {
            "description": "JSON Array of Pending Subscriber objects", 
            "example": [
              {
                "created_at": "2023-01-01T09:30:00-0800", 
                "id": "ps_abc123xyz0q95", 
                "phone_number": "15552223333", 
                "shopify_customer_id": "8888777333111"
              }
            ], 
            "items": {
              "$ref": "#/components/schemas/PendingSubscriberSerializer"
            }, 
            "title": "Pending Subscribers", 
            "type": "array"
          }
        }, 
        "required": [
          "pending_subscribers"
        ], 
        "title": "PendingSubscriberList", 
        "type": "object"
      }, 
      "PendingSubscriberSearch": {
        "properties": {
          "created_at__eq": {
            "format": "date-time", 
            "title": "Created At is Equal To", 
            "type": "string"
          }, 
          "created_at__gt": {
            "format": "date-time", 
            "title": "Created At is Greater Than", 
            "type": "string"
          }, 
          "created_at__gte": {
            "format": "date-time", 
            "title": "Created At is Greater Than or Equal To", 
            "type": "string"
          }, 
          "created_at__lt": {
            "format": "date-time", 
            "title": "Created At is Less Than", 
            "type": "string"
          }, 
          "created_at__lte": {
            "format": "date-time", 
            "title": "Created At is Less Than or Equal To", 
            "type": "string"
          }, 
          "page": {
            "default": 1, 
            "title": "Page", 
            "type": "integer"
          }, 
          "phone_number__eq": {
            "title": "Phone Number is Equal To", 
            "type": "integer"
          }, 
          "phone_number__gt": {
            "title": "Phone Number is Greater Than", 
            "type": "integer"
          }, 
          "phone_number__gte": {
            "title": "Phone Number is Greater Than or Equal To", 
            "type": "integer"
          }, 
          "phone_number__in": {
            "items": {}, 
            "title": "Phone Number is In", 
            "type": "array"
          }, 
          "phone_number__lt": {
            "title": "Phone Number is Less Than", 
            "type": "integer"
          }, 
          "phone_number__lte": {
            "title": "Phone Number is Less Than or Equal To", 
            "type": "integer"
          }, 
          "shopify_customer_id__contains": {
            "title": "Shopify Customer Id Contains", 
            "type": "string"
          }, 
          "shopify_customer_id__eq": {
            "title": "Shopify Customer Id is Equal To", 
            "type": "string"
          }, 
          "shopify_customer_id__in": {
            "items": {}, 
            "title": "Shopify Customer Id is In", 
            "type": "array"
          }, 
          "sort": {
            "description": "In `{field}__asc` or `{field}__desc` format. Valid fields:\n\n`created_at`, `updated_at`, `phone_number`, `shopify_customer_id`", 
            "title": "Sorting Order", 
            "type": "string"
          }, 
          "updated_at__eq": {
            "format": "date-time", 
            "title": "Updated At is Equal To", 
            "type": "string"
          }, 
          "updated_at__gt": {
            "format": "date-time", 
            "title": "Updated At is Greater Than", 
            "type": "string"
          }, 
          "updated_at__gte": {
            "format": "date-time", 
            "title": "Updated At is Greater Than or Equal To", 
            "type": "string"
          }, 
          "updated_at__lt": {
            "format": "date-time", 
            "title": "Updated At is Less Than", 
            "type": "string"
          }, 
          "updated_at__lte": {
            "format": "date-time", 
            "title": "Updated At is Less Than or Equal To", 
            "type": "string"
          }
        }, 
        "title": "PendingSubscriberSearch", 
        "type": "object"
      }, 
      "PendingSubscriberSerializer": {
        "description": "A Postscript Subscriber.", 
        "properties": {
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which Pending Subscriber was registered", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "Created At", 
            "type": "string"
          }, 
          "id": {
            "description": "ID of the Subscriber", 
            "example": "ps_abc123xyz0q95", 
            "title": "Id", 
            "type": "string"
          }, 
          "phone_number": {
            "description": "Phone number of the pending subscriber", 
            "example": "15552223333", 
            "title": "example: \"+15552223333\"", 
            "type": "string"
          }, 
          "resource": {
            "default": "pending_subscriber", 
            "title": "Resource", 
            "type": "string"
          }, 
          "shopify_customer_id": {
            "description": "Shopify Customer ID", 
            "example": 8888777333111, 
            "title": "Shopify Customer Id", 
            "type": "integer"
          }
        }, 
        "required": [
          "id", 
          "phone_number"
        ], 
        "title": "PendingSubscriberSerializer", 
        "type": "object"
      }, 
      "PutSubscriber_EntityConflict": {
        "properties": {
          "http_status": {
            "default": 409, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Pending subscriber already exists with phone_number: 15552223333", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_conflict", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "PutSubscriber_EntityConflict", 
        "type": "object"
      }, 
      "ResourceType": {
        "description": "An enumeration.", 
        "enum": [
          "shop", 
          "partner"
        ], 
        "title": "ResourceType", 
        "type": "string"
      }, 
      "SentMessageSerializer": {
        "description": "Sent Message Serializer", 
        "properties": {
          "body": {
            "description": "Sent Message text as delivered.", 
            "example": "Postscript: Hello World!", 
            "title": "example: \"Postscript: Hello, World!\"", 
            "type": "string"
          }, 
          "cost": {
            "description": "Message cost - null if credits-based billing is used.", 
            "example": "0.00134", 
            "title": "example: '0.00134'", 
            "type": "string"
          }, 
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which delivery was attempted.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "credits_used": {
            "description": "Credits used - null if usage-based billing is used.", 
            "example": 1, 
            "title": "example: 1", 
            "type": "integer"
          }, 
          "id": {
            "description": "ID of the Sent Message.", 
            "example": "sm_abc123xyz0q95", 
            "title": "example: \"sm_abc123xyz0q95\"", 
            "type": "string"
          }, 
          "phone": {
            "description": "Phone number of the recipient (Subscriber).", 
            "example": "15552223333", 
            "title": "example: \"+15552223333\"", 
            "type": "string"
          }, 
          "shop_id": {
            "description": "ID of the Shop.", 
            "example": "shop_abc123xyz0q95", 
            "title": "example: \"shop_abc123xyz0q95\"", 
            "type": "string"
          }, 
          "subscriber_id": {
            "description": "ID of the recipient (Subscriber).", 
            "example": "s_abc123xyz0q95", 
            "title": "example: \"s_abc123xyz0q95\"", 
            "type": "string"
          }
        }, 
        "title": "SentMessageSerializer", 
        "type": "object"
      }, 
      "SubscriberList": {
        "description": "A list of Subscribers.", 
        "properties": {
          "page_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageInfo"
              }
            ], 
            "description": "Page number of results found", 
            "example": "{'page': 1, 'total_pages': 1}", 
            "title": "Page Info"
          }, 
          "subscribers": {
            "description": "JSON Array of Subscriber objects", 
            "example": [
              {
                "created_at": "2023-01-01T09:30:00-0800", 
                "data": {}, 
                "email": "email@email.com", 
                "id": "s_abc123xyz0q95", 
                "phone_number": "15552223333", 
                "properties": {
                  "birthday": "1991-01-01", 
                  "categories": [
                    "Beauty", 
                    "Home Goods"
                  ], 
                  "days_since_purchase": 5, 
                  "has_purchased": true
                }, 
                "shopify_customer_id": 8888777333111, 
                "tags": [
                  "VIP"
                ], 
                "updated_at": "2023-01-01T09:30:00-0800"
              }
            ], 
            "items": {
              "$ref": "#/components/schemas/SubscriberSerializer"
            }, 
            "title": "Subscribers", 
            "type": "array"
          }
        }, 
        "required": [
          "subscribers"
        ], 
        "title": "SubscriberList", 
        "type": "object"
      }, 
      "SubscriberSearch": {
        "properties": {
          "created_at__eq": {
            "format": "date-time", 
            "title": "Created At is Equal To", 
            "type": "string"
          }, 
          "created_at__gt": {
            "format": "date-time", 
            "title": "Created At is Greater Than", 
            "type": "string"
          }, 
          "created_at__gte": {
            "format": "date-time", 
            "title": "Created At is Greater Than or Equal To", 
            "type": "string"
          }, 
          "created_at__lt": {
            "format": "date-time", 
            "title": "Created At is Less Than", 
            "type": "string"
          }, 
          "created_at__lte": {
            "format": "date-time", 
            "title": "Created At is Less Than or Equal To", 
            "type": "string"
          }, 
          "page": {
            "default": 1, 
            "title": "Page", 
            "type": "integer"
          }, 
          "phone_number__contains": {
            "title": "Phone Number Contains", 
            "type": "string"
          }, 
          "phone_number__eq": {
            "title": "Phone Number is Equal To", 
            "type": "string"
          }, 
          "phone_number__in": {
            "items": {}, 
            "title": "Phone Number is In", 
            "type": "array"
          }, 
          "shopify_customer_id__contains": {
            "title": "Shopify Customer Id Contains", 
            "type": "string"
          }, 
          "shopify_customer_id__eq": {
            "title": "Shopify Customer Id is Equal To", 
            "type": "string"
          }, 
          "shopify_customer_id__in": {
            "items": {}, 
            "title": "Shopify Customer Id is In", 
            "type": "array"
          }, 
          "sort": {
            "description": "In `{field}__asc` or `{field}__desc` format. Valid fields:\n\n`created_at`, `updated_at`, `phone_number`, `shopify_customer_id`", 
            "title": "Sorting Order", 
            "type": "string"
          }, 
          "updated_at__eq": {
            "format": "date-time", 
            "title": "Updated At is Equal To", 
            "type": "string"
          }, 
          "updated_at__gt": {
            "format": "date-time", 
            "title": "Updated At is Greater Than", 
            "type": "string"
          }, 
          "updated_at__gte": {
            "format": "date-time", 
            "title": "Updated At is Greater Than or Equal To", 
            "type": "string"
          }, 
          "updated_at__lt": {
            "format": "date-time", 
            "title": "Updated At is Less Than", 
            "type": "string"
          }, 
          "updated_at__lte": {
            "format": "date-time", 
            "title": "Updated At is Less Than or Equal To", 
            "type": "string"
          }
        }, 
        "title": "SubscriberSearch", 
        "type": "object"
      }, 
      "SubscriberSerializer": {
        "description": "A Postscript Subscriber.", 
        "properties": {
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which Subscriber was registered", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "Created At", 
            "type": "string"
          }, 
          "data": {
            "default": {}, 
            "title": "Data", 
            "type": "object"
          }, 
          "email": {
            "description": "Subscriber Email", 
            "example": "email@email.com", 
            "title": "Email", 
            "type": "string"
          }, 
          "id": {
            "description": "ID of the Subscriber", 
            "example": "s_abc123xyz0q95", 
            "title": "example: \"s_abc123xyz0q95\"", 
            "type": "string"
          }, 
          "phone_number": {
            "description": "Phone number of the subscriber", 
            "example": "15552223333", 
            "title": "example: \"+15552223333\"", 
            "type": "string"
          }, 
          "properties": {
            "description": "Custom properties as key/value pairs. Values can be: strings, integers, string arrays, or ISO 8601 date(time). Subscribers can have up to 20 custom properties. If properties is unset or null, it will be ignored.", 
            "example": {
              "birthday": "1991-01-01", 
              "categories": [
                "Beauty", 
                "Home Goods"
              ], 
              "days_since_purchase": 5, 
              "has_purchased": true
            }, 
            "format": "json-string", 
            "title": "Properties", 
            "type": "string"
          }, 
          "resource": {
            "default": "subscriber", 
            "title": "Resource", 
            "type": "string"
          }, 
          "shopify_customer_id": {
            "description": "Shopify Customer ID", 
            "example": "8888777333111", 
            "title": "Shopify Customer Id", 
            "type": "integer"
          }, 
          "subscriptions": {
            "additionalProperties": {
              "type": "object"
            }, 
            "description": "Confirmed subscriptions (transactional and/or promotional)", 
            "example": {
              "promotional": {
                "can_send": true
              }, 
              "transactional": {
                "can_send": true
              }
            }, 
            "title": "Subscriptions", 
            "type": "object"
          }, 
          "tags": {
            "description": "Subscriber Tags", 
            "example": "['VIP']", 
            "items": {
              "type": "string"
            }, 
            "title": "Tags", 
            "type": "array"
          }, 
          "updated_at": {
            "description": "ISO 8601 datetime (UTC) at which Subscriber was last updated", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "Updated At", 
            "type": "string"
          }
        }, 
        "required": [
          "id", 
          "phone_number", 
          "subscriptions"
        ], 
        "title": "SubscriberSerializer", 
        "type": "object"
      }, 
      "TestShopWebhookPayload": {
        "description": "Incoming payload for a test Shop webhook.", 
        "properties": {
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ], 
            "description": "Webhook subscription `event` type.", 
            "example": "shop.incoming_message", 
            "title": "example: \"shop.incoming_message\""
          }
        }, 
        "required": [
          "event"
        ], 
        "title": "TestShopWebhookPayload", 
        "type": "object"
      }, 
      "TestShopWebhook_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "No active event subscription for id", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "TestShopWebhook_EntityNotFound", 
        "type": "object"
      }, 
      "TestShopWebhook_RequestError": {
        "properties": {
          "http_status": {
            "default": 400, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "shop:event` events are not supported for this auth", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.request_error", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "TestShopWebhook_RequestError", 
        "type": "object"
      }, 
      "UpdateSingleSubscriber": {
        "description": "Updates a single Subscriber (PATCH)", 
        "properties": {
          "properties": {
            "description": "Custom properties as key/value pairs. Values can be: strings, integers, string arrays, or ISO 8601 date(time). Subscribers can have up to 20 custom properties. If properties is unset or null, it will be ignored.", 
            "example": {
              "birthday": "1991-01-01", 
              "categories": [
                "Beauty", 
                "Home Goods"
              ], 
              "days_since_purchase": 5, 
              "has_purchased": true
            }, 
            "format": "json-string", 
            "title": "Properties", 
            "type": "string"
          }, 
          "tags": {
            "description": "Subscriber Tags", 
            "example": [
              "VIP"
            ], 
            "items": {
              "type": "string"
            }, 
            "title": "Tags", 
            "type": "array"
          }
        }, 
        "title": "UpdateSingleSubscriber", 
        "type": "object"
      }, 
      "UpdateWebhookSubscriptionPayload": {
        "description": "PUT/PATCH payload.", 
        "properties": {
          "callback_url": {
            "description": "Destination URL for webhook deliveries (HTTPS only).", 
            "example": "https://www.example.com/webhook", 
            "format": "uri", 
            "maxLength": 65536, 
            "minLength": 1, 
            "title": "example: \"https://www.example.com/webhook\"", 
            "type": "string"
          }, 
          "headers": {
            "additionalProperties": {
              "type": "string"
            }, 
            "default": {}, 
            "description": "Custom key:value pairs to be sent as headers in every callback.", 
            "example": {
              "custom": "abc123"
            }, 
            "title": "example: {\"custom\": \"abc123\"}", 
            "type": "object"
          }
        }, 
        "title": "UpdateWebhookSubscriptionPayload", 
        "type": "object"
      }, 
      "UpdateWebhookSubscription_EntityNotFound": {
        "properties": {
          "http_status": {
            "default": 404, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Invalid webhook id provided: a47606a1-5b39-4a81-9480-c2cb738ff675", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_not_found", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "UpdateWebhookSubscription_EntityNotFound", 
        "type": "object"
      }, 
      "ValidationError": {
        "description": "Validation error model.\n\nThis captures the errors pydantic generates.", 
        "properties": {
          "ctx": {
            "title": "Ctx", 
            "type": "object"
          }, 
          "log": {
            "items": {
              "type": "string"
            }, 
            "title": "Log", 
            "type": "array"
          }, 
          "msg": {
            "title": "Msg", 
            "type": "string"
          }, 
          "type": {
            "title": "Type", 
            "type": "string"
          }
        }, 
        "required": [
          "log", 
          "msg", 
          "type", 
          "ctx"
        ], 
        "title": "ValidationError", 
        "type": "object"
      }, 
      "ValidationErrors": {
        "description": "List of validation errors.", 
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }, 
            "title": "Errors", 
            "type": "array"
          }
        }, 
        "required": [
          "errors"
        ], 
        "title": "ValidationErrors", 
        "type": "object"
      }, 
      "WebhookSigningTokenResponse": {
        "description": "Webhook Signing Token response.", 
        "properties": {
          "token": {
            "description": "Webhook validation token.", 
            "title": "Token", 
            "type": "string"
          }
        }, 
        "required": [
          "token"
        ], 
        "title": "WebhookSigningTokenResponse", 
        "type": "object"
      }, 
      "WebhookSigningToken_EntityConflict": {
        "properties": {
          "http_status": {
            "default": 409, 
            "title": "Http Status", 
            "type": "integer"
          }, 
          "message": {
            "default": "Conflicting entity exists.", 
            "title": "Message", 
            "type": "string"
          }, 
          "type": {
            "default": "v2.entity_conflict", 
            "title": "Type", 
            "type": "string"
          }
        }, 
        "title": "WebhookSigningToken_EntityConflict", 
        "type": "object"
      }, 
      "WebhookSubscriptionListResponse": {
        "description": "List response.", 
        "properties": {
          "webhook_subscriptions": {
            "description": "Webhook Subscriptions List", 
            "example": [
              {
                "callback_url": "https://example.com", 
                "created_at": "2023-01-01T09:30:00-0800", 
                "event": "shop.incoming_message", 
                "headers": {
                  "custom": "abc123"
                }, 
                "id": "a47606a1-5b39-4a81-9480-c2cb738ff675", 
                "updated_at": "2023-01-01T09:30:00-0800"
              }
            ], 
            "items": {
              "$ref": "#/components/schemas/WebhookSubscriptionResponse"
            }, 
            "title": "Webhook Subscriptions", 
            "type": "array"
          }
        }, 
        "required": [
          "webhook_subscriptions"
        ], 
        "title": "WebhookSubscriptionListResponse", 
        "type": "object"
      }, 
      "WebhookSubscriptionResponse": {
        "description": "Fetch response.", 
        "properties": {
          "callback_url": {
            "description": "Destination URL for webhook deliveries (HTTPS only).", 
            "example": "https://www.example.com/webhook", 
            "format": "uri", 
            "maxLength": 65536, 
            "minLength": 1, 
            "title": "example: \"https://www.example.com/webhook\"", 
            "type": "string"
          }, 
          "created_at": {
            "description": "ISO 8601 datetime (UTC) at which the Webhook Subscription was created.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ], 
            "description": "Webhook subscription `event` type.", 
            "example": "shop.incoming_message", 
            "title": "example: \"shop.incoming_message\""
          }, 
          "headers": {
            "additionalProperties": {
              "type": "string"
            }, 
            "default": {}, 
            "description": "Custom key:value pairs to be sent as headers in every callback.", 
            "example": {
              "custom": "abc123"
            }, 
            "title": "example: {\"custom\": \"abc123\"}", 
            "type": "object"
          }, 
          "id": {
            "anyOf": [
              {
                "type": "string"
              }, 
              {
                "format": "uuid", 
                "type": "string"
              }
            ], 
            "description": "ID of the Webhook Subscription.", 
            "example": "a47606a1-5b39-4a81-9480-c2cb738ff675", 
            "title": "UUID"
          }, 
          "updated_at": {
            "description": "ISO 8601 datetime (UTC) at which the Webhook Subscription was last updated.", 
            "example": "2023-01-01T09:30:00-0800", 
            "format": "date-time", 
            "title": "example: \"2023-01-01T09:30:00-0800\"", 
            "type": "string"
          }, 
          "webhook_id": {
            "description": "Hidden.", 
            "format": "uuid", 
            "title": "excluded", 
            "type": "string"
          }
        }, 
        "required": [
          "webhook_id"
        ], 
        "title": "WebhookSubscriptionResponse", 
        "type": "object"
      }
    }, 
    "securitySchemes": {
      "PrivateApiKey": {
        "description": "As a shop, use your Private API Key as the **Bearer token**, such as `Authorization: Bearer sk_1234567890abc` (Partners must use their own specific API Key instead ex: `Authorization: Bearer sk_partner_1234567890abc`)", 
        "scheme": "bearer", 
        "type": "http"
      }
    }
  }, 
  "info": {
    "description": "**IMPORTANT: The v2 Partner API is currently in beta. API routes,\nsignatures, and behavior may change in the future.**\n\n**Integration Partners:** Request Partner API Credentials\nfrom Postscript's [Partners Page](https://postscript.io/partners)\n\n**Postscript Shops:** Generate API Keys from the app's\n[API Settings Page](https://app.postscript.io/account/api)", 
    "title": "PartnerAPIv2", 
    "version": "3.0.0"
  }, 
  "openapi": "3.0.0", 
  "paths": {
    "/api/v2/events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "post": {
        "description": "", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomSubscriberEventsRequestSerializer"
              }
            }
          }, 
          "description": "CustomSubscriberEventsRequestSerializer", 
          "required": true
        }, 
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomSubscriberEventsResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Create Custom Subscriber Event", 
        "tags": [
          "Custom Subscriber Events"
        ]
      }
    }, 
    "/api/v2/events/{event_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the event you'd like to receive", 
            "in": "path", 
            "name": "event_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomSubscriberEventResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomSubscriberEvent_UnauthorizedAccessError"
                }
              }
            }, 
            "description": "GetCustomSubscriberEvent_UnauthorizedAccessError"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomSubscriberEvent_EntityNotFound"
                }
              }
            }, 
            "description": "GetCustomSubscriberEvent_EntityNotFound"
          }
        }, 
        "summary": "Get Custom Subscriber Event", 
        "tags": [
          "Custom Subscriber Events"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/healthz": {
      "get": {
        "description": "", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Health Check", 
        "tags": [
          "Authentication"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/keywords": {
      "get": {
        "description": "", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordsList"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Fetch Keywords List", 
        "tags": [
          "Keywords"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/keywords/{keyword_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the keyword you'd like to receive", 
            "in": "path", 
            "name": "keyword_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSingleKeyword_EntityNotFound"
                }
              }
            }, 
            "description": "FetchSingleKeyword_EntityNotFound"
          }
        }, 
        "summary": "Fetch Single Keyword", 
        "tags": [
          "Keywords"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/me": {
      "get": {
        "description": "", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Verify Identity", 
        "tags": [
          "Authentication"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/message_requests": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "post": {
        "description": "", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequestSerializer"
              }
            }
          }, 
          "description": "CreateMessageRequestSerializer", 
          "required": true
        }, 
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRequestSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMessageRequest_RequestError"
                }
              }
            }, 
            "description": "CreateMessageRequest_RequestError"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMessageRequest_EntityNotFound"
                }
              }
            }, 
            "description": "CreateMessageRequest_EntityNotFound"
          }, 
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMessageRequest_EntityConflict"
                }
              }
            }, 
            "description": "CreateMessageRequest_EntityConflict"
          }, 
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMessageRequest_InternalServerError"
                }
              }
            }, 
            "description": "CreateMessageRequest_InternalServerError"
          }
        }, 
        "summary": "Create Message Request", 
        "tags": [
          "Message Requests"
        ]
      }
    }, 
    "/api/v2/message_requests/{external_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the message request you'd like to receive", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRequestSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMessageRequest_RequestError"
                }
              }
            }, 
            "description": "FetchMessageRequest_RequestError"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMessageRequest_EntityNotFound"
                }
              }
            }, 
            "description": "FetchMessageRequest_EntityNotFound"
          }
        }, 
        "summary": "Fetch Message Request", 
        "tags": [
          "Message Requests"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/sent_messages/{external_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the sent message you'd like to receive", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentMessageSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSentMessage_RequestError"
                }
              }
            }, 
            "description": "FetchSentMessage_RequestError"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSentMessage_EntityNotFound"
                }
              }
            }, 
            "description": "FetchSentMessage_EntityNotFound"
          }
        }, 
        "summary": "Fetch Sent Message", 
        "tags": [
          "Sent Messages"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/subscribers": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "in": "query", 
            "name": "SubscriberSearch", 
            "schema": {
              "$ref": "#/components/schemas/SubscriberSearch"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberList"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Fetch Subscribers List", 
        "tags": [
          "Subscribers"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "post": {
        "description": "", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSingleSubscriber"
              }
            }
          }, 
          "description": "CreateSingleSubscriber", 
          "required": true
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSubscriber_EntityConflict"
                }
              }
            }, 
            "description": "CreateSubscriber_EntityConflict"
          }
        }, 
        "summary": "Create Subscriber", 
        "tags": [
          "Subscribers"
        ]
      }
    }, 
    "/api/v2/subscribers/pending": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "in": "query", 
            "name": "PendingSubscriberSearch", 
            "schema": {
              "$ref": "#/components/schemas/PendingSubscriberSearch"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingSubscriberList"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "Fetch Pending Subscribers List", 
        "tags": [
          "Subscribers"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/subscribers/pending/{external_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the pending subscriber you'd like to receive", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingSubscriberSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPendingSubscriber_EntityNotFound"
                }
              }
            }, 
            "description": "FetchPendingSubscriber_EntityNotFound"
          }
        }, 
        "summary": "Fetch Pending Subscriber", 
        "tags": [
          "Subscribers"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/subscribers/{external_id}": {
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the subscriber you'd like to receive", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSubscriber_EntityNotFound"
                }
              }
            }, 
            "description": "FetchSubscriber_EntityNotFound"
          }
        }, 
        "summary": "Fetch Subscriber", 
        "tags": [
          "Subscribers"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "patch": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the subscriber you'd like to update", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSingleSubscriber"
              }
            }
          }, 
          "description": "UpdateSingleSubscriber", 
          "required": true
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchSubscriber_EntityNotFound"
                }
              }
            }, 
            "description": "PatchSubscriber_EntityNotFound"
          }
        }, 
        "summary": "Patch Subscriber", 
        "tags": [
          "Subscribers"
        ]
      }, 
      "put": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the subscriber you'd like to update", 
            "in": "path", 
            "name": "external_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSingleSubscriber"
              }
            }
          }, 
          "description": "CreateSingleSubscriber", 
          "required": true
        }, 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberSerializer"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutSubscriber_EntityConflict"
                }
              }
            }, 
            "description": "PutSubscriber_EntityConflict"
          }
        }, 
        "summary": "Put Subscriber", 
        "tags": [
          "Subscribers"
        ]
      }
    }, 
    "/api/v2/webhooks": {
      "get": {
        "description": "", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionListResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrors"
                }
              }
            }, 
            "description": "Bad Request"
          }
        }, 
        "summary": "List Webhook Subscriptions", 
        "tags": [
          "Webhooks"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "post": {
        "description": "", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscriptionPayload"
              }
            }
          }, 
          "description": "CreateWebhookSubscriptionPayload", 
          "required": true
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWebhookSubscription_EntityConflict"
                }
              }
            }, 
            "description": "CreateWebhookSubscription_EntityConflict"
          }
        }, 
        "summary": "Create Webhook Subscription", 
        "tags": [
          "Webhooks"
        ]
      }
    }, 
    "/api/v2/webhooks/test": {
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "post": {
        "description": "", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestShopWebhookPayload"
              }
            }
          }, 
          "description": "TestShopWebhookPayload", 
          "required": true
        }, 
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestShopWebhook_RequestError"
                }
              }
            }, 
            "description": "TestShopWebhook_RequestError"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestShopWebhook_EntityNotFound"
                }
              }
            }, 
            "description": "TestShopWebhook_EntityNotFound"
          }
        }, 
        "summary": "Test Shop Webhook", 
        "tags": [
          "Webhooks"
        ]
      }
    }, 
    "/api/v2/webhooks/token": {
      "get": {
        "description": "", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSigningTokenResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSigningToken_EntityConflict"
                }
              }
            }, 
            "description": "WebhookSigningToken_EntityConflict"
          }
        }, 
        "summary": "Webhook Signing Token", 
        "tags": [
          "Webhooks"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ]
    }, 
    "/api/v2/webhooks/{webhook_id}": {
      "delete": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the webhook subscription you'd like to **delete**", 
            "in": "path", 
            "name": "webhook_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWebhookSubscription_EntityNotFound"
                }
              }
            }, 
            "description": "DeleteWebhookSubscription_EntityNotFound"
          }
        }, 
        "summary": "Delete Webhook Subscription", 
        "tags": [
          "Webhooks"
        ]
      }, 
      "get": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the webhook subscription you'd like to receive", 
            "in": "path", 
            "name": "webhook_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchWebhookSubscription_EntityNotFound"
                }
              }
            }, 
            "description": "FetchWebhookSubscription_EntityNotFound"
          }
        }, 
        "summary": "Fetch Webhook Subscription", 
        "tags": [
          "Webhooks"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Postscript-Shop-Token"
        }
      ], 
      "patch": {
        "description": "", 
        "parameters": [
          {
            "description": " The id of the webhook subscription you'd like to update", 
            "in": "path", 
            "name": "webhook_id", 
            "required": true, 
            "schema": {
              "type": "string"
            }
          }
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscriptionPayload"
              }
            }
          }, 
          "description": "UpdateWebhookSubscriptionPayload", 
          "required": true
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                }
              }
            }, 
            "description": "Successful Request"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWebhookSubscription_EntityNotFound"
                }
              }
            }, 
            "description": "UpdateWebhookSubscription_EntityNotFound"
          }
        }, 
        "summary": "Update Webhook Subscription", 
        "tags": [
          "Webhooks"
        ]
      }
    }
  }, 
  "security": [
    {
      "PrivateApiKey": []
    }
  ], 
  "servers": [
    {
      "description": "Postscript API Base URL", 
      "url": "https://api.postscript.io"
    }
  ]
}